import asyncio
from datetime import datetime, time, timedelta
import pytz
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CallbackQueryHandler, \
    ConversationHandler, CommandHandler

from config import TOKEN, GROUPS

moscow_tz = pytz.timezone("Europe/Moscow")

conn = sqlite3.connect("reports.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS reports (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT,
    user_id INTEGER,
    response TEXT,
    report_type TEXT,
    company TEXT,
    group_id INTEGER
)
""")

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
cursor.execute("""
CREATE TABLE IF NOT EXISTS sent_messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT,
    user_id INTEGER,
    group_id INTEGER,
    message_type TEXT,
    sent_at TIMESTAMP
)
""")
conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ConversationHandler ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
WAITING_FOR_REPORT = 1

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
waiting_for_report = {}


async def send_report_request_in_group(app, group_id, user_id, report_type, is_reminder=False):
    user_data = GROUPS[group_id][user_id]
    user_name = user_data["name"]

    if is_reminder:
        if report_type == "morning":
            text = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, [{user_name}](tg://user?id={user_id}): –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª—é–¥–µ–π –Ω–∞ –æ–±—ä–µ–∫—Ç–µ."
        else:
            text = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, [{user_name}](tg://user?id={user_id}): –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö."
    else:
        if report_type == "morning":
            text = f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, [{user_name}](tg://user?id={user_id})! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –æ—Ç—á—ë—Ç –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª—é–¥–µ–π –Ω–∞ –æ–±—ä–µ–∫—Ç–µ."
        else:
            text = f"–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä, [{user_name}](tg://user?id={user_id})! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö."

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞
    keyboard = [[InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data=f"report_{report_type}_{user_id}_{group_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await app.bot.send_message(
            chat_id=group_id,
            text=text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É
        now = datetime.now(moscow_tz)
        message_type = f"{report_type}_{'reminder' if is_reminder else 'initial'}"
        cursor.execute("""
        INSERT INTO sent_messages (date, user_id, group_id, message_type, sent_at) 
        VALUES (?, ?, ?, ?, ?)
        """, (now.strftime("%Y-%m-%d"), user_id, group_id, message_type, now))
        conn.commit()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {group_id}: {e}")


async def send_pending_reports_notification(app, group_id, report_type):
    today_str = datetime.now(moscow_tz).strftime("%Y-%m-%d")
    users = GROUPS[group_id]

    pending_users = []

    for user_id, user_data in users.items():
        cursor.execute("""
        SELECT COUNT(*) FROM reports 
        WHERE date=? AND user_id=? AND report_type=? AND group_id=?
        """, (today_str, user_id, report_type, group_id))
        sent = cursor.fetchone()[0] > 0
        if not sent:
            pending_users.append(user_data["name"])

    if not pending_users:
        if report_type == "morning":
            text = "‚òÄÔ∏è –í—Å–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—á—ë—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã."
        else:
            text = "üåô –í—Å–µ –≤–µ—á–µ—Ä–Ω–∏–µ –æ—Ç—á—ë—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã."
    else:
        if report_type == "morning":
            text = "‚òÄÔ∏è *–û–∂–∏–¥–∞—é—Ç—Å—è —É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—á—ë—Ç—ã –æ—Ç:*\n" + "\n".join(f"‚Ä¢ {name}" for name in pending_users)
        else:
            text = "üåô *–û–∂–∏–¥–∞—é—Ç—Å—è –≤–µ—á–µ—Ä–Ω–∏–µ –æ—Ç—á—ë—Ç—ã –æ—Ç:*\n" + "\n".join(f"‚Ä¢ {name}" for name in pending_users)

    await app.bot.send_message(
        chat_id=group_id,
        text=text,
        parse_mode=ParseMode.MARKDOWN
    )


async def check_last_message_time(user_id, group_id, message_type, date):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–æ—à–ª–æ –ª–∏ 60 –º–∏–Ω—É—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    cursor.execute("""
    SELECT sent_at FROM sent_messages 
    WHERE date=? AND user_id=? AND group_id=? AND message_type LIKE ?
    ORDER BY sent_at DESC LIMIT 1
    """, (date, user_id, group_id, f"%{message_type}%"))

    result = cursor.fetchone()
    if result:
        last_sent = datetime.fromisoformat(result[0])
        if isinstance(last_sent, str):
            last_sent = datetime.strptime(last_sent, "%Y-%m-%d %H:%M:%S.%f").replace(tzinfo=moscow_tz)
        now = datetime.now(moscow_tz)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –Ω–µ –º–µ–Ω–µ–µ 60 –º–∏–Ω—É—Ç
        return (now - last_sent) >= timedelta(minutes=60)
    return True


async def schedule_tasks(app):
    # –§–ª–∞–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Ä–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    morning_initial_sent = {}
    evening_initial_sent = {}

    morning_summary_sent = set()  # –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–∑ –≤ –¥–µ–Ω—å
    evening_summary_sent = set()

    while True:
        now = datetime.now(moscow_tz)
        today_str = now.strftime("%Y-%m-%d")
        current_time = now.time()

        morning_time = time(10, 0, 0)
        evening_time = time(19, 0, 0)

        for group_id, users in GROUPS.items():
            if group_id not in morning_initial_sent:
                morning_initial_sent[group_id] = {}
            if group_id not in evening_initial_sent:
                evening_initial_sent[group_id] = {}

            for user_id in users:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏ —É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á–µ—Ç —Å–µ–≥–æ–¥–Ω—è
                cursor.execute("""
                SELECT COUNT(*) FROM reports 
                WHERE date=? AND user_id=? AND report_type='morning' AND group_id=?
                """, (today_str, user_id, group_id))
                morning_sent = cursor.fetchone()[0] > 0

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏ –≤–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á–µ—Ç —Å–µ–≥–æ–¥–Ω—è
                cursor.execute("""
                SELECT COUNT(*) FROM reports 
                WHERE date=? AND user_id=? AND report_type='evening' AND group_id=?
                """, (today_str, user_id, group_id))
                evening_sent = cursor.fetchone()[0] > 0

                # –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å 10:00 –¥–æ 19:00)
                if morning_time <= current_time < evening_time and not morning_sent:
                    if user_id not in morning_initial_sent[group_id]:
                        cursor.execute("""
                        SELECT COUNT(*) FROM sent_messages 
                        WHERE date=? AND user_id=? AND group_id=? AND message_type='morning_initial'
                        """, (today_str, user_id, group_id))
                        morning_initial_sent[group_id][user_id] = cursor.fetchone()[0] > 0

                    if not morning_initial_sent[group_id][user_id]:
                        await send_report_request_in_group(app, group_id, user_id, "morning", is_reminder=False)
                        morning_initial_sent[group_id][user_id] = True

                # –í–µ—á–µ—Ä–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å 19:00 –∏ –¥–∞–ª–µ–µ)
                if current_time >= evening_time and not evening_sent:
                    if user_id not in evening_initial_sent[group_id]:
                        cursor.execute("""
                        SELECT COUNT(*) FROM sent_messages 
                        WHERE date=? AND user_id=? AND group_id=? AND message_type='evening_initial'
                        """, (today_str, user_id, group_id))
                        evening_initial_sent[group_id][user_id] = cursor.fetchone()[0] > 0

                    if not evening_initial_sent[group_id][user_id]:
                        await send_report_request_in_group(app, group_id, user_id, "evening", is_reminder=False)
                        evening_initial_sent[group_id][user_id] = True

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Ç—Ä–æ–º –ø–æ—Å–ª–µ 10:05 (–æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å)
            if current_time >= time(10, 5, 0) and group_id not in morning_summary_sent:
                await send_pending_reports_notification(app, group_id, "morning")
                morning_summary_sent.add(group_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–µ—á–µ—Ä–æ–º –ø–æ—Å–ª–µ 19:05 (–æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å)
            if current_time >= time(19, 5, 0) and group_id not in evening_summary_sent:
                await send_pending_reports_notification(app, group_id, "evening")
                evening_summary_sent.add(group_id)

        # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –≤ –ø–æ–ª–Ω–æ—á—å
        if current_time < time(0, 1, 0):
            morning_initial_sent.clear()
            evening_initial_sent.clear()
            morning_summary_sent.clear()
            evening_summary_sent.clear()

        await asyncio.sleep(30)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("report_"):
        parts = query.data.split("_")
        report_type = parts[1]
        target_user_id = int(parts[2])
        group_id = int(parts[3])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞
        if query.from_user.id != target_user_id:
            await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞
        waiting_for_report[target_user_id] = {
            "report_type": report_type,
            "group_id": group_id,
            "message_id": query.message.message_id
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç
        report_name = "—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª—é–¥–µ–π" if report_type == "morning" else "–≤–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö"
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {report_name}:"
        )

        await query.edit_message_text(
            text=query.message.text + "\n\n_–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç—á—ë—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö..._",
            parse_mode=ParseMode.MARKDOWN
        )


async def handle_private_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –æ—Ç—á—ë—Ç –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in waiting_for_report:
        report_info = waiting_for_report[user_id]
        report_type = report_info["report_type"]
        group_id = report_info["group_id"]

        today_str = datetime.now(moscow_tz).strftime("%Y-%m-%d")
        text = update.message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
        INSERT INTO reports (date, user_id, response, report_type, company, group_id) 
        VALUES (?, ?, ?, ?, ?, ?)
        """, (today_str, user_id, text, report_type, GROUPS[group_id][user_id]["company"], group_id))
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç.")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á—ë—Ç–æ–º –¥–ª—è –≥—Ä—É–ø–ø—ã
        user_name = GROUPS[group_id][user_id]["name"]
        company = GROUPS[group_id][user_id]["company"]
        report_title = "–£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç" if report_type == "morning" else "–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç"

        group_message = f"""
üìã *{report_title}*
üë§ *–°–æ—Ç—Ä—É–¥–Ω–∏–∫:* [{user_name}](tg://user?id={user_id})
üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* {company}
üìÖ *–î–∞—Ç–∞:* {today_str}

*–û—Ç—á—ë—Ç:*
{text}
"""

        await context.bot.send_message(
            chat_id=group_id,
            text=group_message,
            parse_mode=ParseMode.MARKDOWN
        )

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç—á—ë—Ç
        del waiting_for_report[user_id]
    else:
        # –ï—Å–ª–∏ –æ—Ç—á—ë—Ç –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–∞—Ö
        user_groups = [gid for gid, users in GROUPS.items() if user_id in users]
        if user_groups:
            await update.message.reply_text(
                "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ."
            )


async def handle_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í –≥—Ä—É–ø–ø–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    pass


async def post_init(application):
    """–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    asyncio.create_task(schedule_tasks(application))


def main():
    app = ApplicationBuilder().token(TOKEN).post_init(post_init).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(button_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(
        filters.TEXT & filters.ChatType.PRIVATE & (~filters.COMMAND),
        handle_private_message
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    app.add_handler(MessageHandler(
        filters.TEXT & filters.ChatType.GROUPS & (~filters.COMMAND),
        handle_group_message
    ))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    app.run_polling()


if __name__ == "__main__":
    main()
