import asyncio
from datetime import datetime, time, timedelta
import pytz
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes, CallbackQueryHandler, \
    ConversationHandler, CommandHandler
from telegram.error import BadRequest, TelegramError
from config import TOKEN, GROUPS

moscow_tz = pytz.timezone("Europe/Moscow")

conn = sqlite3.connect("reports.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS reports (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT,
    user_id INTEGER,
    response TEXT,
    report_type TEXT,
    company TEXT,
    group_id INTEGER
)
""")

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
cursor.execute("""
CREATE TABLE IF NOT EXISTS sent_messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    date TEXT,
    user_id INTEGER,
    group_id INTEGER,
    message_type TEXT,
    sent_at TIMESTAMP
)
""")
conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è ConversationHandler ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
WAITING_FOR_REPORT = 1

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
waiting_for_report = {}


async def send_report_request_with_buttons(app, group_id, report_type):
    today_str = datetime.now(moscow_tz).strftime("%Y-%m-%d")
    users = GROUPS[group_id]

    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç
    pending_users = []
    for user_id, user_data in users.items():
        cursor.execute("""
        SELECT COUNT(*) FROM reports 
        WHERE date=? AND user_id=? AND report_type=? AND group_id=?
        """, (today_str, user_id, report_type, group_id))
        sent = cursor.fetchone()[0] > 0
        if not sent:
            pending_users.append((user_id, user_data["name"]))

    if report_type == "morning":
        header = "‚òÄÔ∏è *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª—é–¥–µ–π –Ω–∞ –æ–±—ä–µ–∫—Ç–µ:\n"
    else:
        header = "üåô *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö:\n"

    if not pending_users:
        text = header + "\n–í—Å–µ –æ—Ç—á—ë—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã. –°–ø–∞—Å–∏–±–æ!"
        await app.bot.send_message(chat_id=group_id, text=text, parse_mode=ParseMode.MARKDOWN)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏
    buttons = []
    text_lines = [header]
    for user_id, name in pending_users:  # –ò–∑–º–µ–Ω–µ–Ω–æ: user_data -> name
        text_lines.append(f"‚Ä¢ {name}")  # –ò–∑–º–µ–Ω–µ–Ω–æ: user_data['name'] -> name
        buttons.append([InlineKeyboardButton(f"üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç ({name})",  # –ò–∑–º–µ–Ω–µ–Ω–æ: user_data['name'] -> name
                                             callback_data=f"report_{report_type}_{user_id}_{group_id}")])

    text = "\n".join(text_lines)
    reply_markup = InlineKeyboardMarkup(buttons)

    await app.bot.send_message(
        chat_id=group_id,
        text=text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )


async def send_evening_summary_21(app, group_id):
    today_str = datetime.now(moscow_tz).strftime("%Y-%m-%d")
    users = GROUPS[group_id]

    morning_sent = []
    morning_pending = []
    evening_sent = []
    evening_pending = []

    for user_id, user_data in users.items():
        cursor.execute("""
        SELECT COUNT(*) FROM reports
        WHERE date=? AND user_id=? AND report_type='morning' AND group_id=?
        """, (today_str, user_id, group_id))
        if cursor.fetchone()[0] > 0:
            morning_sent.append(user_data["name"])
        else:
            morning_pending.append(user_data["name"])

        cursor.execute("""
        SELECT COUNT(*) FROM reports
        WHERE date=? AND user_id=? AND report_type='evening' AND group_id=?
        """, (today_str, user_id, group_id))
        if cursor.fetchone()[0] > 0:
            evening_sent.append(user_data["name"])
        else:
            evening_pending.append(user_data["name"])

    text = "üïò *–°–≤–æ–¥–∫–∞ –ø–æ –æ—Ç—á—ë—Ç–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"

    text += "‚òÄÔ∏è *–£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç:*\n"
    text += "‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª–∏:\n" + ("\n".join(f"‚Ä¢ {n}" for n in morning_sent) if morning_sent else "‚Ä¢ –ù–∏–∫—Ç–æ") + "\n"
    text += "‚ö†Ô∏è –ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏:\n" + ("\n".join(f"‚Ä¢ {n}" for n in morning_pending) if morning_pending else "‚Ä¢ –í—Å–µ") + "\n\n"

    text += "üåô *–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç:*\n"
    text += "‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª–∏:\n" + ("\n".join(f"‚Ä¢ {n}" for n in evening_sent) if evening_sent else "‚Ä¢ –ù–∏–∫—Ç–æ") + "\n"
    text += "‚ö†Ô∏è –ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏:\n" + ("\n".join(f"‚Ä¢ {n}" for n in evening_pending) if evening_pending else "‚Ä¢ –í—Å–µ") + "\n"

    await app.bot.send_message(
        chat_id=group_id,
        text=text,
        parse_mode=ParseMode.MARKDOWN
    )


async def schedule_tasks(app):
    sent_10 = set()
    sent_19 = set()
    sent_21 = set()

    while True:
        now = datetime.now(moscow_tz)
        current_time = now.time()
        group_ids = GROUPS.keys()

        for group_id in group_ids:
            if current_time >= time(10, 0) and group_id not in sent_10:
                await send_report_request_with_buttons(app, group_id, "morning")
                sent_10.add(group_id)

            if current_time >= time(19, 0) and group_id not in sent_19:
                await send_report_request_with_buttons(app, group_id, "evening")
                sent_19.add(group_id)

            if current_time >= time(21, 0) and group_id not in sent_21:
                await send_evening_summary_21(app, group_id)
                sent_21.add(group_id)

        # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –≤ –ø–æ–ª–Ω–æ—á—å
        if current_time < time(0, 1):
            sent_10.clear()
            sent_19.clear()
            sent_21.clear()

        await asyncio.sleep(30)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        if not query.data.startswith("report_"):
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        parts = query.data.split("_")
        if len(parts) != 4:
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        report_type = parts[1]
        target_user_id = int(parts[2])
        group_id = int(parts[3])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∞–ª —Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞
        if query.from_user.id != target_user_id:
            await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_str = datetime.now(moscow_tz).strftime("%Y-%m-%d")
        cursor.execute("""
        SELECT COUNT(*) FROM reports 
        WHERE date=? AND user_id=? AND report_type=? AND group_id=?
        """, (today_str, target_user_id, report_type, group_id))
        if cursor.fetchone()[0] > 0:
            await query.answer("–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è!", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –æ—Ç—á–µ—Ç –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if target_user_id in waiting_for_report:
            await query.answer("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞
        waiting_for_report[target_user_id] = {
            "report_type": report_type,
            "group_id": group_id,
            "message_id": query.message.message_id,
            "timestamp": datetime.now(moscow_tz)
        }

        report_name = "—É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª—é–¥–µ–π" if report_type == "morning" else "–≤–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö"

        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=target_user_id,
                text=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {report_name}:"
            )
            await query.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞.", show_alert=True)

        except TelegramError as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            del waiting_for_report[target_user_id]  # –û—á–∏—â–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
            error_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

            try:
                await query.answer(error_text, show_alert=True)
            except BadRequest:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
                await context.bot.send_message(
                    chat_id=group_id,
                    text=f"@{query.from_user.username}, {error_text}"
                )

    except BadRequest as e:
        if "Query is too old" in str(e):
            # –ï—Å–ª–∏ callback —É—Å—Ç–∞—Ä–µ–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await context.bot.send_message(
                    chat_id=group_id,
                    text="‚ö†Ô∏è –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞."
                )
            except TelegramError:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å—Ç–∞—Ä–µ–≤—à–µ–º callback

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        print(f"Unexpected error in button_handler: {e}")
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except TelegramError:
            pass


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    try:
        if update.effective_message:
            chat_id = update.effective_message.chat_id
        else:
            return

        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}"

        if isinstance(context.error, BadRequest):
            if "Query is too old" in str(context.error):
                error_message = "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏."

        await context.bot.send_message(
            chat_id=chat_id,
            text=error_message
        )

    except Exception as e:
        print(f"Error in error_handler: {e}")


async def handle_private_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –æ—Ç—á—ë—Ç –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in waiting_for_report:
        report_info = waiting_for_report[user_id]
        report_type = report_info["report_type"]
        group_id = report_info["group_id"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (—Ç–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç)
        if datetime.now(moscow_tz) - report_info["timestamp"] > timedelta(minutes=5):
            del waiting_for_report[user_id]
            await update.message.reply_text(
                "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ —Å–Ω–æ–≤–∞."
            )
            return

        today_str = datetime.now(moscow_tz).strftime("%Y-%m-%d")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑, –Ω–µ –±—ã–ª –ª–∏ –æ—Ç—á–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        cursor.execute("""
        SELECT COUNT(*) FROM reports 
        WHERE date=? AND user_id=? AND report_type=? AND group_id=?
        """, (today_str, user_id, report_type, group_id))
        if cursor.fetchone()[0] > 0:
            del waiting_for_report[user_id]
            await update.message.reply_text(
                "–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è!"
            )
            return

        text = update.message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
        INSERT INTO reports (date, user_id, response, report_type, company, group_id) 
        VALUES (?, ?, ?, ?, ?, ?)
        """, (today_str, user_id, text, report_type, GROUPS[group_id][user_id]["company"], group_id))
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç.")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á—ë—Ç–æ–º –¥–ª—è –≥—Ä—É–ø–ø—ã
        user_name = GROUPS[group_id][user_id]["name"]
        company = GROUPS[group_id][user_id]["company"]
        report_title = "–£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç" if report_type == "morning" else "–í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç"

        group_message = f"""
üìã *{report_title}*
üë§ *–°–æ—Ç—Ä—É–¥–Ω–∏–∫:* [{user_name}](tg://user?id={user_id})
üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* {company}
üìÖ *–î–∞—Ç–∞:* {today_str}

*–û—Ç—á—ë—Ç:*
{text}
"""

        await context.bot.send_message(
            chat_id=group_id,
            text=group_message,
            parse_mode=ParseMode.MARKDOWN
        )

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ç—á—ë—Ç
        del waiting_for_report[user_id]
    else:
        # –ï—Å–ª–∏ –æ—Ç—á—ë—Ç –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–∞—Ö
        user_groups = [gid for gid, users in GROUPS.items() if user_id in users]
        if user_groups:
            await update.message.reply_text(
                "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ."
            )


async def handle_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í –≥—Ä—É–ø–ø–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    pass


async def post_init(application):
    """–ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    asyncio.create_task(schedule_tasks(application))


def main():
    try:
        app = ApplicationBuilder().token(TOKEN).post_init(post_init).build()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
        app.add_handler(CallbackQueryHandler(button_handler))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        app.add_handler(MessageHandler(
            filters.TEXT & filters.ChatType.PRIVATE & (~filters.COMMAND),
            handle_private_message
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
        app.add_handler(MessageHandler(
            filters.TEXT & filters.ChatType.GROUPS & (~filters.COMMAND),
            handle_group_message
        ))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        app.add_error_handler(error_handler)

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
        app.run_polling()

    except Exception as e:
        print(f"Critical error: {e}")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É


if __name__ == "__main__":
    main()
